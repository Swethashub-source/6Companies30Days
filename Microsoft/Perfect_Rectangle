#Question:

Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).

Return true if all the rectangles together form an exact cover of a rectangular region.

 

Example 1:


Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]
Output: true
Explanation: All 5 rectangles together form an exact cover of a rectangular region.
Example 2:


Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]
Output: false
Explanation: Because there is a gap between the two rectangular regions.
Example 3:


Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]
Output: false
Explanation: Because two of the rectangles overlap with each other.
 

Constraints:

1 <= rectangles.length <= 2 * 104
rectangles[i].length == 4
-105 <= xi, yi, ai, bi <= 105


#Solution:
class Solution:
    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:
        cornerpts=set()
        a,b,c,d,area=float('inf'),float('inf'),float('-inf'),float('-inf'),0
        for x1,y1,x2,y2 in rectangles:
            if x1<=a and y1<=b: a,b=x1,y1
            if x2>=c and y2>=d: c,d=x2,y2
            area+=(x2-x1)*(y2-y1)
            cornerpts^={(x1,y1),(x2,y2),(x1,y2),(x2,y1)}
        return cornerpts=={(a,b),(c,d),(a,d),(c,b)} and area==(c-a)*(d-b)


#Question:
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.


#Solution:

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int l=nums.length;
        int[] dp=new int[l];
        int ldsSize=getSize(nums,dp,l);
        return constructLDS(nums,dp,ldsSize,l);
    }
    public int getSize(int[] nums,int[] dp,int l){
       Arrays.sort(nums);
       Arrays.fill(dp,1);
       int size=1;
       for(int i=1;i<l;i++){
           for(int j=0;j<i;j++){
               if(nums[i]%nums[j]==0){
                   dp[i]=Math.max(dp[i],dp[j]+1);
                   size=Math.max(size,dp[i]);
               }
           }
       }
       return size;
    }
    public List<Integer> constructLDS(int[] nums,int[] dp,int ldsSize,int l){
        int prev=-1;
        List<Integer> ans=new ArrayList<>();
        for(int i=l-1;i>=0;i--){
            if(dp[i]==ldsSize && (prev==-1 || prev%nums[i]==0)){
                ans.add(nums[i]);
                ldsSize--;
                prev=nums[i];
            }
        }
        return ans;
    }
}
